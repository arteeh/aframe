<a-entity trigger-enter="@OnCollide()" @attributes="@attributes" ></a-entity>

@code
{
	[Parameter] public string Id { get; set; }
	[Parameter] public string Model { get; set; }
	[Parameter] public Position P { get; set; }
	[Parameter] public Rotation R { get; set; }
	[Parameter] public Scale S { get; set; }
	[Parameter] public CollisionType CollisionType { get; set; }
	[Parameter] public EventCallback<string> OnCollideCallback { get; set; }

	private Dictionary<string, object> attributes;

	public AModel()
	{
		Id = ""; Model = "";
		P = new(); R = new(); S = new(); attributes = new();
		CollisionType = CollisionType.NonconvexRecursive;
		OnCollideCallback = new EventCallback<string>();
	}

	public AModel(string id, string model,
		CollisionType collisionType = CollisionType.NonconvexRecursive,
		EventCallback<string> onCollideCallback = new EventCallback<string>(),
		double posX = 0, double posY = 0, double posZ = 0,
		double rotX = 0, double rotY = 0, double rotZ = 0,
		double sclX = 1, double sclY = 1, double sclZ = 1)
	{
		Id = id;
		Model = model;
		P = new(posX,posY,posZ); R = new(rotX,rotY,rotZ); S = new(sclX,sclY,sclZ);
		CollisionType = collisionType;
		OnCollideCallback = onCollideCallback;
		attributes = new();
	}

	protected override Task OnParametersSetAsync()
	{
		attributes.Clear();
		attributes.Add("id", Id);
		attributes.Add("gltf-model", Model);
		attributes.Add("position", P.ToString());
		attributes.Add("rotation", R.ToString());
		attributes.Add("scale", S.ToString());

		switch (CollisionType)
		{
			case CollisionType.Convex:
				attributes.Add("sq-collider", "");
				break;
			case CollisionType.ConvexRecursive:
				attributes.Add("sq-collider", "recursive: true");
				break;
			case CollisionType.Nonconvex:
				attributes.Add("sq-nonconvexcollider", "");
				break;
			case CollisionType.NonconvexRecursive:
				attributes.Add("sq-nonconvexcollider", "recursive: true");
				break;
		}

		if (OnCollideCallback.HasDelegate)
		{
			attributes.Add("sq-triggercollider", "");
			attributes.Add("trigger-enter", "@OnCollide()");
		}

		return Task.CompletedTask;
	}

	private async Task OnCollide()
	{
		await OnCollideCallback.InvokeAsync(Id);
	}
}
