@inherits AEntity

@switch(CollisionType)
{
	case CollisionType.None:
		<a-entity id="@Topic" model-loaded="@OnModelLoaded()" gltf-model="@GLTFHref" position="@Pos" rotation="@Rot" scale="@Scl"></a-entity>
		break;
	case CollisionType.Convex:
		<a-entity id="@Topic" model-loaded="@OnModelLoaded()" gltf-model="@GLTFHref" position="@Pos" rotation="@Rot" scale="@Scl" sq-collider></a-entity>
		break;
	case CollisionType.ConvexRecursive:
		<a-entity id="@Topic" model-loaded="@OnModelLoaded()" gltf-model="@GLTFHref" position="@Pos" rotation="@Rot" scale="@Scl" sq-collider="recursive: true"></a-entity>
		break;
	case CollisionType.Nonconvex:
		<a-entity id="@Topic" model-loaded="@OnModelLoaded()" gltf-model="@GLTFHref" position="@Pos" rotation="@Rot" scale="@Scl" sq-nonconvexcollider></a-entity>
		break;
	case CollisionType.NonconvexRecursive:
		<a-entity id="@Topic" model-loaded="@OnModelLoaded()" gltf-model="@GLTFHref" position="@Pos" rotation="@Rot" scale="@Scl" sq-nonconvexcollider="recursive: true"></a-entity>
		break;
}

@code {

	[Parameter]
	public string Topic { get; set; } = "";

	[Parameter]
	public string GLTFHref { get; set; } = "";

	[Parameter]
	public EventCallback<string> OnModelLoadedCallback { get; set; }

	[Parameter]
	public CollisionType CollisionType { get; set; } = CollisionType.NonconvexRecursive;

	public AModel() {}

	public AModel(string topic, string gltfHref, EventCallback<string> onModelLoadedCallback, CollisionType collisionType = CollisionType.NonconvexRecursive,
		double posX = 0, double posY = 0, double posZ = 0, double rotX = 0, double rotY = 0, double rotZ = 0, double sclX = 1, double sclY = 1, double sclZ = 1) : base(posX,posY,posZ,rotX,rotY,rotZ,sclX,sclY,sclZ)
	{
		Topic = topic;
		GLTFHref = gltfHref;
		OnModelLoadedCallback = onModelLoadedCallback;
		CollisionType = collisionType;
	}

	public async Task OnModelLoaded()
	{
		await OnModelLoadedCallback.InvokeAsync(Topic);
	}

}
