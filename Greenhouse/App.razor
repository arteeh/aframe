@using Microsoft.JSInterop
@using AFrame
@using AFrame.Components

@inject IJSRuntime JS

<!-- Static objects go here -->

<APlane Id="respawnfloor"	Color="pink"	Opacity=0.0	P="@(new Position(001,-03,000))"	R="@(new Rotation(-90,000,000))"	S="@(new Size(50,50))"	/>
@* <APlane	Color="green"		Opacity=0.1 P="new Position(011,002,000)"	R="new Rotation(0,90,0)"	S="new WidthHeight(24,6)"	/> <!-- invwallwest --> *@
@* <APlane	Color="blue"		Opacity=0.1 P="new Position(001,002,012)"	R="new Rotation(0,0,0)"		S="new WidthHeight(20,6)"	/> <!-- invwallnorth --> *@
@* <APlane	Color="yellow"		Opacity=0.1 P="new Position(001,002,-12)"	R="new Rotation(0,0,0)"		S="new WidthHeight(20,6)"	/> <!-- invwallsouth --> *@
@* <APlane	Color="pink"		Opacity=0.1 P="new Position(-09,002,000)"	R="new Rotation(0,90,0)"	S="new WidthHeight(24,6)"	/> <!-- invwalleast --> *@
<AModel Id="earth"			Model="#earth"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel Id="ccollideonly"	Model="#ccollideonly"	CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel Id="cpebbles"		Model="#cpebbles"		CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel	Id="cleaves"			Model="#cleaves"			CollisionType="CollisionType.None"></AModel>
<AModel	Id="door"			Model="#door"			CollisionType="CollisionType.None"></AModel>
<AModel	Id="bench"			Model="#bench"			CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel	Id="chair"			Model="#chair"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel	Id="sign"			Model="#sign"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AImage Src="#signimage"	P="@(new Position(9.09,1.1,6.21))"	R="@(new Rotation(-10,219,5))"	S="@(new Size(1.2,0.5))"></AImage>

@foreach (ComponentBase e in entities.Values)
{
	<DynamicComponent Type="@e.GetType()" Parameters="ComponentParameters.Get(e)" />
}

<script>
AFRAME.registerComponent('trigger-enter-handler', {
	init: function() {
		this.el.addEventListener('trigger-enter', ()=>{
			if (this.el.object3D.userData.isLocalPlayer){
				DotNet.invokeMethodAsync('Greenhouse', 'OnTriggerEnter', this.el.id);
			}
		});
	}
});
</script>

@code
{
	private static App _app;
	
	private Dictionary<string, ComponentBase> entities;

	AModel cphysical;
	AModel cntnrfltng;
	AModel lily00;
	AModel lily01;

	public App()
	{
		_app = this;
		entities	= new();
		cphysical	= new("cphysical", "#cphysical", collisionType: CollisionType.ConvexRecursive);
		cntnrfltng	= new("cntnrfltng", "#cntnrfltng", collisionType: CollisionType.ConvexRecursive);
		lily00		= new("lily00", "#lily00", collisionType: CollisionType.ConvexRecursive);
		lily01		= new("lily01", "#lily01", collisionType: CollisionType.ConvexRecursive);
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync");

		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("OnParametersSetAsync");

		await base.OnParametersSetAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine($"OnAfterRenderAsync({firstRender})");

		if(firstRender)
		{
			entities.Add("cphysical", cphysical);
			entities.Add("cntnrfltng", cntnrfltng);
			entities.Add("lily00", lily00);
			entities.Add("lily01", lily01);
			StateHasChanged();
		}
	}

	private void OnModelLoadedCallback(string topic)
	{
		Console.WriteLine($"Loaded {topic}");
	}

	// JS to C#
	
	[JSInvokable]
	public static async Task OnTriggerEnter(string topic)
	{
		Console.WriteLine($"Collided with {topic}");
		if (topic == "respawnfloor")
		{
			await _app.MovePlayer(9, 0.25, -4); // back to spawn
		}
	}
	
	// C# to JS

	public async Task MovePlayer(double x, double y, double z)
	{
		Dictionary<string, double> xyz = new();
		xyz.Add("x",x);
		xyz.Add("y",y);
		xyz.Add("z",z);
		await JS.InvokeVoidAsync("movePlayer", xyz);
	}
}
