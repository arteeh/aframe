@page "/"

@using Common
@using Common.Components

<a-sky color="#040020"></a-sky>
@* <ASky Color="#040020"></ASky> *@
@* <a-entity environment="preset: starry; ground: none;"></a-entity> *@

@foreach (ComponentBase e in entities.Values)
{
	Dictionary<string, object> paramz = ComponentParameters.Get(e);	
	//paramz.Add("OnModelLoadedCallback", EventCallback.Factory.Create<string>(this, OnModelLoadedCallback));
	<DynamicComponent Type="@e.GetType()" Parameters="@paramz" />
}

@code {

	private Dictionary<string, ComponentBase> entities = new();
	private Queue<(string, ComponentBase)> entityLoadQueue = new();
	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("OnParametersSetAsync");
		await base.OnParametersSetAsync();
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync");
		
		entities.Add("entities/tempfloor", new ABox(color: null, posX: 1, posY: 0.25, sclX: 21, sclY: 0, sclZ: 25));

		EventCallback<string> ec = EventCallback.Factory.Create<string>(this, OnModelLoadedCallback);

		entityLoadQueue.Enqueue(("entities/earth", new AModel("entities/earth", "Assets/Earth.gltf", ec, CollisionType.ConvexRecursive)));
		entityLoadQueue.Enqueue(("entities/ccollideonly", new AModel("entities/ccollideonly", "Assets/CCollideOnly.gltf", ec, CollisionType.NonconvexRecursive)));
		entityLoadQueue.Enqueue(("entities/cpebbles", new AModel("entities/cpebbles", "Assets/CPebbles.gltf", ec))); // maybe no collision
		entityLoadQueue.Enqueue(("entities/cleaves", new AModel("entities/cleaves", "Assets/CLeaves.gltf", ec, CollisionType.None)));
		entityLoadQueue.Enqueue(("entities/door", new AModel("entities/door", "Assets/Door.gltf", ec, CollisionType.None)));
		entityLoadQueue.Enqueue(("entities/cphysical", new AModel("entities/cphysical", "Assets/CPhysical.gltf", ec)));
		entityLoadQueue.Enqueue(("entities/bench", new AModel("entities/bench", "Assets/Bench.gltf", ec)));
		entityLoadQueue.Enqueue(("entities/chair", new AModel("entities/chair", "Assets/Chair.gltf", ec)));
		entityLoadQueue.Enqueue(("entities/containerfloating", new AModel("entities/containerfloating", "Assets/ContainerFloating.gltf", ec)));
		entityLoadQueue.Enqueue(("entities/lily00", new AModel("entities/lily00", "Assets/Lily00.gltf", ec)));
		entityLoadQueue.Enqueue(("entities/lily01", new AModel("entities/lily01", "Assets/Lily01.gltf", ec)));

		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		(string topic,ComponentBase component) toDequeue;
		if(entityLoadQueue.TryDequeue(out toDequeue))
		{
			//await Task.Delay(2000); // replace with "wait until done loading previous model"
			Console.WriteLine($"Adding {toDequeue.topic}");
			entities.Add(toDequeue.topic,toDequeue.component);
			StateHasChanged();
		}
		
		// TODO: little sign with:
		// "Stylized Mangrove Greenhouse by Andrey Bársh"
		// "VR port by arteeh"
	}

	private void OnModelLoadedCallback(string topic)
	{
		Console.WriteLine($"Loaded {topic}");
	}

}	