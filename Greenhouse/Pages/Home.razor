@using Common
@using Common.Components
@using Common.Components.Base

@page "/"

<!-- Static objects go here -->

<APlane	Color="red"	Opacity=0.1 OnCollideCallback="@clc"	P="new Position(001,-01,000)"	R="new Rotation(-90,0,0)"	WH="new WidthHeight(30,30)"	/> <!-- invfloor -->
@* <APlane	Color="green"		Opacity=0.1 P="new Position(011,002,000)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwallwest --> *@
@* <APlane	Color="blue"		Opacity=0.1 P="new Position(001,002,012)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallnorth --> *@
@* <APlane	Color="yellow"		Opacity=0.1 P="new Position(001,002,-12)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallsouth --> *@
@* <APlane	Color="pink"		Opacity=0.1 P="new Position(-09,002,000)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwalleast --> *@
<AModel Topic="earth"			GLTFHref="#earth"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel Topic="ccollideonly"	GLTFHref="#ccollideonly"	CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel Topic="cpebbles"		GLTFHref="#cpebbles"		CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel	Topic="cleaves"			GLTFHref="#cleaves"			CollisionType="CollisionType.None"></AModel>
<AModel	Topic="door"			GLTFHref="#door"			CollisionType="CollisionType.None"></AModel>
<AModel	Topic="bench"			GLTFHref="#bench"			CollisionType="CollisionType.NonconvexRecursive"></AModel>
<AModel	Topic="chair"			GLTFHref="#chair"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel	Topic="sign"			GLTFHref="#sign"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AImage ImagePath="#signimage"	P="@(new Position(9.09,1.1,6.21))"	R="@(new Rotation(-10,219,5))"	WH="@(new WidthHeight(1.2,0.5))"></AImage>

@foreach (ComponentBase e in entities.Values)
{
	<DynamicComponent Type="@e.GetType()" Parameters="ComponentParameters.Get(e)" />
}

@code
{
	private Dictionary<string, ComponentBase> entities = new();
	private Queue<(string, ComponentBase)> entityLoadQueue = new();
	private EventCallback<string> mlc;
	private EventCallback<string> clc;

	AModel cphysical;
	AModel cntnrfltng;
	AModel lily00;
	AModel lily01;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync");
		
		mlc = EventCallback.Factory.Create<string>(this, OnModelLoadedCallback);
		clc = EventCallback.Factory.Create<string>(this, OnCollideCallback);
		
		cphysical	= new("cphysical", "#cphysical", mlc, collisionType: CollisionType.ConvexRecursive);
		cntnrfltng	= new("cntnrfltng", "#cntnrfltng", mlc, collisionType: CollisionType.ConvexRecursive);
		lily00		= new("lily00", "#lily00", mlc, collisionType: CollisionType.ConvexRecursive);
		lily01		= new("lily01", "#lily01", mlc, collisionType: CollisionType.ConvexRecursive);

		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("OnParametersSetAsync");

		await base.OnParametersSetAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine($"OnAfterRenderAsync({firstRender})");

		if(firstRender)
		{
			entityLoadQueue.Enqueue(("cphysical", cphysical));
			entityLoadQueue.Enqueue(("cntnrfltng", cntnrfltng));
			entityLoadQueue.Enqueue(("lily00", lily00));
			entityLoadQueue.Enqueue(("lily01", lily01));
			
			_ = LoadNextModel();
		}
	}

	private void OnModelLoadedCallback(string topic)
	{
		Console.WriteLine($"Loaded {topic}");

		_ = LoadNextModel();
	}
	
	private void OnCollideCallback(string topic)
	{
		Console.WriteLine($"Collided with {topic}");
	}
	
	private async Task LoadNextModel()
	{
		await Task.Run(() =>
		{
			(string topic,ComponentBase component) toDequeue;
			if(entityLoadQueue.TryDequeue(out toDequeue))
			{
				if (entities.ContainsKey(toDequeue.topic))
				{
					Console.WriteLine($"Updating {toDequeue.topic}");
					entities[toDequeue.topic] = toDequeue.component;
				}
				else
				{
					Console.WriteLine($"Adding {toDequeue.topic}");
					entities.Add(toDequeue.topic,toDequeue.component);
					StateHasChanged();
				}
			}
		});
	}
}