@page "/"

@* <a-sky color="#070C2B"></a-sky> *@
@* <a-entity environment="preset: starry; ground: none;"></a-entity> *@
<!-- Invisible floor and wall colliders to prevent falling out of the world -->
@* <ABox Color="red"		Opacity=0.1 PosX=1	PosY=0	PosZ=0		SclX=20	SclY=0	SclZ=24	/> <!-- invfloor -->
<ABox Color="green"	Opacity=0.1 PosX=11	PosY=3	PosZ=0		SclX=0	SclY=6	SclZ=24	/> <!-- invwallwest -->
<ABox Color="blue"	Opacity=0.1 PosX=1	PosY=3	PosZ=12		SclX=20	SclY=6	SclZ=0	/> <!-- invwallnorth -->
<ABox Color="yellow"	Opacity=0.1 PosX=1	PosY=3	PosZ=-12	SclX=20	SclY=6	SclZ=0	/> <!-- invwallsouth -->
<ABox Color="pink"	Opacity=0.1 PosX=-9	PosY=3	PosZ=0		SclX=0	SclY=6	SclZ=24	/> <!-- invwalleast --> *@

<ASky	Color="#070C2B" /> <!-- Image="Assets/textures/gaia.png" -->
<APlane	Color="red"		Opacity=0.2	P="new Position(1,0,0)"		R="new Rotation(-90,0,0)"	WH="new WidthHeight(20,24)"	/> <!-- invfloor -->
<APlane	Color="green"	Opacity=0.2 P="new Position(11,3,0)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwallwest -->
<APlane	Color="blue"	Opacity=0.2 P="new Position(1,3,12)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallnorth -->
<APlane	Color="yellow"	Opacity=0.2 P="new Position(1,3,-12)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallsouth -->
<APlane	Color="pink"	Opacity=0.2 P="new Position(-9,3,0)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwalleast -->

@foreach (ComponentBase e in entities.Values)
{
	<DynamicComponent Type="@e.GetType()" Parameters="ComponentParameters.Get(e)" />
}

@code
{
	private Dictionary<string, ComponentBase> entities = new();
	private Queue<(string, ComponentBase)> entityLoadQueue = new();
	private EventCallback<string> ec;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync");
		
		ec = EventCallback.Factory.Create<string>(this, OnModelLoadedCallback);

		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("OnParametersSetAsync");

		await base.OnParametersSetAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine($"OnAfterRenderAsync({firstRender})");

		if(firstRender)
		{
			entityLoadQueue.Enqueue(("entities/earth",			new AModel("entities/earth",		"Assets/Earth.gltf",		ec, CollisionType.ConvexRecursive)));
			entityLoadQueue.Enqueue(("entities/ccollideonly",	new AModel("entities/ccollideonly",	"Assets/CCollideOnly.gltf",	ec, CollisionType.NonconvexRecursive)));
			entityLoadQueue.Enqueue(("entities/cpebbles",		new AModel("entities/cpebbles",		"Assets/CPebbles.gltf",		ec))); // maybe no collision
			entityLoadQueue.Enqueue(("entities/cleaves",		new AModel("entities/cleaves",		"Assets/CLeaves.gltf",		ec, CollisionType.None)));
			entityLoadQueue.Enqueue(("entities/door",			new AModel("entities/door",			"Assets/Door.gltf",			ec, CollisionType.None)));
			entityLoadQueue.Enqueue(("entities/cphysical",		new AModel("entities/cphysical",	"Assets/CPhysical.gltf",	ec)));
			entityLoadQueue.Enqueue(("entities/bench",			new AModel("entities/bench",		"Assets/Bench.gltf",		ec)));
			entityLoadQueue.Enqueue(("entities/chair",			new AModel("entities/chair",		"Assets/Chair.gltf",		ec)));
			entityLoadQueue.Enqueue(("entities/containerfloating",new AModel("entities/containerfloating","Assets/ContainerFloating.gltf",ec)));
			entityLoadQueue.Enqueue(("entities/lily00",			new AModel("entities/lily00",		"Assets/Lily00.gltf",		ec)));
			entityLoadQueue.Enqueue(("entities/lily01",			new AModel("entities/lily01",		"Assets/Lily01.gltf",		ec)));
			entityLoadQueue.Enqueue(("entities/sign",			new AModel("entities/sign",			"Assets/Sign.gltf",			ec, CollisionType.ConvexRecursive)));
			entityLoadQueue.Enqueue(("entities/signimage",		new AImage("Assets/textures/signimagebg.png", posX:9.09, posY:1.1, posZ:6.21, rotX:-10, rotY:219, rotZ:5, width:2, height:1)));
			_ = LoadNextModel();
		}
	}

	private void OnModelLoadedCallback(string topic)
	{
		Console.WriteLine($"Loaded {topic}");

		_ = LoadNextModel();
	}


	private bool loadingNextModel = false;
	private async Task LoadNextModel()
	{
		while(loadingNextModel) { await Task.Delay(10); }
		loadingNextModel = true;
		(string topic,ComponentBase component) toDequeue;
		if(entityLoadQueue.TryDequeue(out toDequeue))
		{
			if(toDequeue.topic == "entities/ccollideonly")
			{
				Console.WriteLine($"Waiting...");
				await Task.Delay(1000);
			}
			Console.WriteLine($"Adding {toDequeue.topic}");
			entities.Add(toDequeue.topic,toDequeue.component);
			StateHasChanged();
		}
		loadingNextModel = false;
	}
}	