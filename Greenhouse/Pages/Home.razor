@using Common
@using Common.Components
@using Common.Components.Base

@page "/"

@* <APlane	Color="red"		Opacity=0.0	P="new Position(1,0,0)"		R="new Rotation(-90,0,0)"	WH="new WidthHeight(20,24)"	/> <!-- invfloor -->
<APlane	Color="green"	Opacity=0.0 P="new Position(11,3,0)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwallwest -->
<APlane	Color="blue"	Opacity=0.0 P="new Position(1,3,12)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallnorth -->
<APlane	Color="yellow"	Opacity=0.0 P="new Position(1,3,-12)"	R="new Rotation(0,0,0)"		WH="new WidthHeight(20,6)"	/> <!-- invwallsouth -->
<APlane	Color="pink"	Opacity=0.0 P="new Position(-9,3,0)"	R="new Rotation(0,90,0)"	WH="new WidthHeight(24,6)"	/> <!-- invwalleast --> *@

<!-- Static objects go here -->
<AModel Topic="earth"			GLTFHref="#earth"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel Topic="ccollideonly"	GLTFHref="#ccollideonly"	CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel Topic="cpebbles"		GLTFHref="#cpebbles"		CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel	Topic="cleaves"			GLTFHref="#cleaves"			CollisionType="CollisionType.None"></AModel>
<AModel	Topic="door"			GLTFHref="#door"			CollisionType="CollisionType.None"></AModel>
<AModel	Topic="bench"			GLTFHref="#bench"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel	Topic="chair"			GLTFHref="#chair"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AModel	Topic="sign"			GLTFHref="#sign"			CollisionType="CollisionType.ConvexRecursive"></AModel>
<AImage ImagePath="#signimage" P="@(new Position(9.09,1.1,6.21))" R="@(new Rotation(-10,219,5))" WH="@(new WidthHeight(1.2,0.5))"></AImage>

@foreach (ComponentBase e in entities.Values)
{
	<DynamicComponent Type="@e.GetType()" Parameters="ComponentParameters.Get(e)" />
}

@code
{
	private Dictionary<string, ComponentBase> entities = new();
	private Queue<(string, ComponentBase)> entityLoadQueue = new();
	private EventCallback<string> ec;

	AModel cphysical;
	AModel cntnrfltng;
	AModel lily00;
	AModel lily01;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("OnInitializedAsync");
		
		ec = EventCallback.Factory.Create<string>(this, OnModelLoadedCallback);
		
		cphysical = new("cphysical", "#cphysical", ec, CollisionType.ConvexRecursive);
		cntnrfltng = new("cntnrfltng", "#cntnrfltng", ec, CollisionType.ConvexRecursive);
		lily00 = new("lily00", "#lily00", ec, CollisionType.ConvexRecursive);
		lily01 = new("lily01", "#lily01", ec, CollisionType.ConvexRecursive);

		await base.OnInitializedAsync();
	}

	protected override async Task OnParametersSetAsync()
	{
		Console.WriteLine("OnParametersSetAsync");

		await base.OnParametersSetAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine($"OnAfterRenderAsync({firstRender})");

		if(firstRender)
		{
			entityLoadQueue.Enqueue(("cphysical", cphysical));
			entityLoadQueue.Enqueue(("cntnrfltng", cntnrfltng));
			entityLoadQueue.Enqueue(("lily00", lily00));
			entityLoadQueue.Enqueue(("lily01", lily01));
			
			_ = LoadNextModel();
		}
	}

	private void OnModelLoadedCallback(string topic)
	{
		Console.WriteLine($"Loaded {topic}");

		_ = LoadNextModel();
	}
	
	private async Task LoadNextModel()
	{
		await Task.Run(() =>
		{
			(string topic,ComponentBase component) toDequeue;
			if(entityLoadQueue.TryDequeue(out toDequeue))
			{
				if (entities.ContainsKey(toDequeue.topic))
				{
					Console.WriteLine($"Updating {toDequeue.topic}");
					entities[toDequeue.topic] = toDequeue.component;
				}
				else
				{
					Console.WriteLine($"Adding {toDequeue.topic}");
					entities.Add(toDequeue.topic,toDequeue.component);
				}
				
				StateHasChanged();
			}
		});
	}
}